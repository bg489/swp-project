"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Badge } from "@/components/ui/badge"
import { Heart, CalendarIcon, User, Droplets, Shield, CheckCircle } from "lucide-react"
import { format } from "date-fns"
import { vi } from "date-fns/locale"
import Link from "next/link"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { useAuth } from "@/contexts/auth-context"
import { GuestAccessWarning } from "@/components/auth/guest-access-warning"
import { ProtectedRoute } from "@/components/auth/protected-route"
import { toast } from "@/hooks/use-toast"
import api from "@/lib/axios"

export default function DonatePage() {
  const { user, isLoading } = useAuth()
  
  // S·ª≠ d·ª•ng ng√†y ƒë·ªãa ph∆∞∆°ng thay v√¨ UTC ƒë·ªÉ tr√°nh b·ªã l√πi ng√†y
  const today = new Date();
  const todayString = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
  
  // T√≠nh to√°n ng√†y t·ªëi ƒëa (3 th√°ng t·ª´ h√¥m nay)
  const maxDate = new Date();
  maxDate.setMonth(maxDate.getMonth() + 3);
  const maxDateString = `${maxDate.getFullYear()}-${String(maxDate.getMonth() + 1).padStart(2, '0')}-${String(maxDate.getDate()).padStart(2, '0')}`;

  const [loading, setLoading] = useState(false);
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [selectedDate, setSelectedDate] = useState<Date>()
  const [formData, setFormData] = useState({
    available_date: todayString,
    available_time_range: {
      from: "",
      to: "",
    },
    amount_offered: "",
    components_offered: [] as string[],
    hospital: "",
    notes: "",
  });

  const bloodTypes = ["O-", "O+", "A-", "A+", "B-", "B+", "AB-", "AB+"]
  const timeSlots = ["8:00 - 10:00", "10:00 - 12:00", "12:00 - 14:00", "14:00 - 16:00", "16:00 - 18:00", "18:00 - 20:00"]

  const requirements = [
    "Tu·ªïi t·ª´ 18-60, c√¢n n·∫∑ng t·ªëi thi·ªÉu 45kg",
    "Kh√¥ng m·∫Øc c√°c b·ªánh truy·ªÅn nhi·ªÖm",
    "Kh√¥ng s·ª≠ d·ª•ng thu·ªëc kh√°ng sinh trong 7 ng√†y",
    "Kh√¥ng hi·∫øn m√°u trong v√≤ng 3 th√°ng g·∫ßn ƒë√¢y",
    "S·ª©c kh·ªèe t·ªët, kh√¥ng c√≥ tri·ªáu ch·ª©ng c·∫£m c√∫m",
    "ƒêƒÉng k√Ω tr∆∞·ªõc t·ª´ 1 ng√†y ƒë·∫øn 3 th√°ng",
  ]

  const handleCheckboxChange = (component: string) => {
    const selected = formData.components_offered.includes(component);
    const updated = selected
      ? formData.components_offered.filter((c) => c !== component)
      : [...formData.components_offered, component];

    setFormData((prev) => ({ ...prev, components_offered: updated }));
  };

  // Show loading state while checking auth
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 via-pink-50 to-rose-100 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-red-500 mx-auto mb-4"></div>
            <p className="text-gray-600">ƒêang t·∫£i...</p>
          </div>
        </div>
      </div>
    )
  }

  // Check if user is authorized
  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 via-pink-50 to-rose-100 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center p-4">
          <Card className="w-full max-w-md">
            <CardHeader className="text-center">
              <CardTitle className="text-red-600">Vui l√≤ng ƒëƒÉng nh·∫≠p</CardTitle>
              <CardDescription>
                B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒëƒÉng k√Ω hi·∫øn m√°u.
              </CardDescription>
            </CardHeader>
            <CardContent className="text-center">
              <Link href="/login">
                <Button className="bg-red-600 hover:bg-red-700">
                  ƒêƒÉng nh·∫≠p ngay
                </Button>
              </Link>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  if (user.role !== "donor") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 via-pink-50 to-rose-100 flex flex-col">
        <Header />
        <div className="flex-1 flex items-center justify-center p-4">
          <Card className="w-full max-w-md">
            <CardHeader className="text-center">
              <CardTitle className="text-red-600">Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</CardTitle>
              <CardDescription>
                Trang n√†y ch·ªâ d√†nh cho ng∆∞·ªùi hi·∫øn m√°u. B·∫°n c·∫ßn ƒëƒÉng k√Ω l√† ng∆∞·ªùi hi·∫øn m√°u ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.
              </CardDescription>
            </CardHeader>
          </Card>
        </div>
      </div>
    )
  }


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Prevent double submission
    if (loading) return;
    
    setLoading(true);
    
    try {
      // Validate required fields
      if (!formData.available_date) {
        toast({
          variant: "destructive",
          title: "L·ªói",
          description: "Vui l√≤ng ch·ªçn ng√†y hi·∫øn m√°u.",
        })
        return;
      }

      // Validate date range
      const selectedDate = new Date(formData.available_date);
      const todayDate = new Date(todayString);
      const maxDateObj = new Date(maxDateString);
      
      if (selectedDate < todayDate) {
        toast({
          variant: "destructive",
          title: "L·ªói",
          description: "Ng√†y hi·∫øn m√°u kh√¥ng th·ªÉ l√† ng√†y trong qu√° kh·ª©.",
        })
        return;
      }
      
      if (selectedDate > maxDateObj) {
        toast({
          variant: "destructive",
          title: "L·ªói",
          description: "Ng√†y hi·∫øn m√°u kh√¥ng th·ªÉ qu√° 3 th√°ng t·ª´ h√¥m nay.",
        })
        return;
      }

      if (!formData.available_time_range.from || !formData.available_time_range.to) {
        toast({
          variant: "destructive",
          title: "L·ªói",
          description: "Vui l√≤ng ch·ªçn khung gi·ªù hi·∫øn m√°u.",
        })
        return;
      }

      if (!formData.amount_offered) {
        toast({
          variant: "destructive",
          title: "L·ªói",
          description: "Vui l√≤ng nh·∫≠p l∆∞·ª£ng m√°u d·ª± ki·∫øn hi·∫øn (ml).",
        })
        return;
      }

      console.log("Submitting form with user:", user)
      console.log("Form data:", formData)
      console.log("API Base URL:", process.env.NODE_ENV === "development" ? "http://localhost:5001/api" : "/api")

      // Validate user
      if (!user || !user._id) {
        toast({
          variant: "destructive",
          title: "L·ªói",
          description: "Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ƒëƒÉng k√Ω hi·∫øn m√°u!",
        })
        return;
      }

      // Debug user info
      console.log("Current user:", {
        id: user._id,
        role: user.role,
        email: user.email,
        full_name: user.full_name
      });

      // Validate form data before submitting
      if (formData.components_offered.length === 0) {
        toast({
          variant: "destructive",
          title: "L·ªói",
          description: "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt th√†nh ph·∫ßn m√°u ƒë·ªÉ hi·∫øn.",
        })
        return;
      }

      const requestData = {
        donor_id: user._id,
        available_date: formData.available_date,
        available_time_range: formData.available_time_range,
        amount_offered: parseInt(formData.amount_offered),
        components_offered: formData.components_offered,
        comment: formData.notes,
      };

      console.log("Submitting donor request:", requestData);

      const response = await api.post("/users/donor/request", requestData);

      if (response.status === 201) {
        // Show success state
        setShowSuccessMessage(true);
        
        toast({
          title: "üéâ ƒêƒÉng k√Ω hi·∫øn m√°u th√†nh c√¥ng!",
          description: `C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω hi·∫øn ${formData.amount_offered}ml m√°u v√†o ng√†y ${formData.available_date} t·ª´ ${formData.available_time_range.from} - ${formData.available_time_range.to}. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t!`,
          duration: 6000,
        })
        
        // Show additional success message
        setTimeout(() => {
          toast({
            title: "ü©∏ B·∫°n l√† ng∆∞·ªùi h√πng!",
            description: "H√†nh ƒë·ªông c·ªßa b·∫°n c√≥ th·ªÉ c·ª©u s·ªëng 3 ng∆∞·ªùi. H√£y theo d√µi email ƒë·ªÉ nh·∫≠n th√¥ng b√°o t·ª´ ch√∫ng t√¥i.",
            duration: 5000,
          })
        }, 2000)
        
        // Reset form after 3 seconds
        setTimeout(() => {
          setFormData({
            available_date: todayString,
            available_time_range: { from: "", to: "" },
            amount_offered: "",
            components_offered: [],
            hospital: "",
            notes: "",
          });
          setShowSuccessMessage(false);
        }, 3000)
      }
    } catch (error: any) {
      console.error("Error submitting donor request:", error);
      console.error("Error response:", error.response?.data);
      
      let errorMessage = "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i y√™u c·∫ßu.";
      
      if (error.response?.status === 404) {
        if (error.response?.data?.message?.includes("User not found")) {
          errorMessage = "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
        } else if (error.response?.data?.message?.includes("not a valid donor")) {
          errorMessage = "T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë·ªÉ hi·∫øn m√°u. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.";
        } else {
          errorMessage = "Endpoint kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi server.";
        }
      } else if (error.response?.status === 400) {
        errorMessage = error.response?.data?.message || "Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.";
      } else if (error.response?.status === 500) {
        errorMessage = "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.";
      } else if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error')) {
        errorMessage = "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra server backend c√≥ ƒëang ch·∫°y kh√¥ng.";
      } else if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      }
      
      toast({
        variant: "destructive",
        title: "L·ªói",
        description: errorMessage,
      })
    } finally {
      setLoading(false);
    }
  }

  function returnNameComponentBlood(comp: string): React.ReactNode {
    if (comp === "whole") return "M√°u to√†n ph·∫ßn";
    if (comp === "RBC") return "H·ªìng c·∫ßu";  
    if (comp === "plasma") return "Huy·∫øt t∆∞∆°ng";
    if (comp === "platelet") return "Ti·ªÉu c·∫ßu";
    return comp; // Default case, should not happen
  }

  return (
    <ProtectedRoute requiredRole="donor">
      <div className="min-h-screen bg-gradient-to-b from-red-50 to-white">
      <Header />

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Hero Section */}
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
              <Heart className="w-8 h-8 text-white" />
            </div>
            <Badge className="mb-4 bg-red-100 text-red-800">ü©∏ Tr·ªü th√†nh ng∆∞·ªùi h√πng c·ª©u sinh m·∫°ng</Badge>
            <h1 className="text-4xl font-bold text-gray-900 mb-4">ƒêƒÉng k√Ω hi·∫øn m√°u</h1>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              M·ªôt gi·ªçt m√°u cho ƒëi, m·ªôt sinh m·∫°ng ·ªü l·∫°i. H√£y ƒëƒÉng k√Ω ƒë·ªÉ tr·ªü th√†nh ng∆∞·ªùi hi·∫øn m√°u t√¨nh nguy·ªán.
            </p>
          </div>

          <div className="grid lg:grid-cols-3 gap-8">
            {/* Requirements Card */}
            <div className="lg:col-span-1">
              <Card className="sticky top-24">
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Shield className="w-5 h-5 mr-2 text-red-600" />
                    ƒêi·ªÅu ki·ªán hi·∫øn m√°u
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-3">
                    {requirements.map((req, index) => (
                      <li key={index} className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0" />
                        <span className="text-sm text-gray-600">{req}</span>
                      </li>
                    ))}
                  </ul>
                  <div className="mt-6 p-4 bg-red-50 rounded-lg">
                    <div className="flex items-center mb-2">
                      <CheckCircle className="w-5 h-5 text-red-600 mr-2" />
                      <h4 className="font-semibold text-red-800">L∆∞u √Ω quan tr·ªçng</h4>
                    </div>
                    <p className="text-sm text-red-700">
                      Vui l√≤ng ƒë·ªçc k·ªπ c√°c ƒëi·ªÅu ki·ªán v√† t∆∞ v·∫•n v·ªõi b√°c sƒ© n·∫øu c√≥ th·∫Øc m·∫Øc v·ªÅ s·ª©c kh·ªèe.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Registration Form */}
            <div className="lg:col-span-2">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <User className="w-5 h-5 mr-2 text-red-600" />
                    Th√¥ng tin ƒëƒÉng k√Ω
                  </CardTitle>
                  <CardDescription>
                    Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ li√™n h·ªá khi c·∫ßn thi·∫øt
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {showSuccessMessage && (
                    <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center mb-2">
                        <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                        <h3 className="font-semibold text-green-800">ƒêƒÉng k√Ω th√†nh c√¥ng! üéâ</h3>
                      </div>
                      <p className="text-sm text-green-700 mb-2">
                        C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω hi·∫øn m√°u t√¨nh nguy·ªán! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.
                      </p>
                      <div className="flex items-center text-sm text-green-600">
                        <Heart className="w-4 h-4 mr-1" />
                        <span>B·∫°n c√≥ th·ªÉ c·ª©u s·ªëng ƒë·∫øn 3 ng∆∞·ªùi b·∫±ng h√†nh ƒë·ªông n√†y!</span>
                      </div>
                    </div>
                  )}
                  
                  <form onSubmit={handleSubmit} className="space-y-6">
                    {/* Personal Information */}

                    {/* Availability */}
                    <div className="space-y-4">
                      <div className="max-w-xl mx-auto p-6">
                        <div className="space-y-4">
                          {/* Ng√†y hi·∫øn */}
                          <div>
                            <Label htmlFor="available_date">Ng√†y hi·∫øn m√°u</Label>
                            <Input
                              type="date"
                              id="available_date"
                              min={todayString}
                              max={maxDateString}
                              value={formData.available_date}
                              onChange={(e) =>
                                setFormData((prev) => ({
                                  ...prev,
                                  available_date: e.target.value,
                                }))
                              }
                              required
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              Ch·ªçn ng√†y trong v√≤ng 3 th√°ng t·ªõi (t·ª´ {new Date(todayString).toLocaleDateString('vi-VN')} ƒë·∫øn {new Date(maxDateString).toLocaleDateString('vi-VN')})
                            </p>
                          </div>

                          {/* Khung gi·ªù */}
                          <div>
                            <Label htmlFor="timeSlot">Khung gi·ªù hi·∫øn m√°u</Label>
                            <Select
                              value={`${formData.available_time_range.from} - ${formData.available_time_range.to}`}
                              onValueChange={(value) => {
                                const [from, to] = value.split(' - ');
                                setFormData((prev) => ({
                                  ...prev,
                                  available_time_range: {
                                    from: from,
                                    to: to,
                                  },
                                }))
                              }}
                            >
                              <SelectTrigger>
                                <SelectValue placeholder="Ch·ªçn khung gi·ªù ph√π h·ª£p" />
                              </SelectTrigger>
                              <SelectContent>
                                {timeSlots.map((slot) => (
                                  <SelectItem key={slot} value={slot}>
                                    {slot}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>

                          {/* L∆∞·ª£ng m√°u mu·ªën hi·∫øn */}
                          <div>
                            <Label htmlFor="amount">L∆∞·ª£ng m√°u (ml)</Label>
                            <Input
                              type="number"
                              id="amount"
                              value={formData.amount_offered}
                              onChange={(e) =>
                                setFormData((prev) => ({
                                  ...prev,
                                  amount_offered: e.target.value,
                                }))
                              }
                              placeholder="V√≠ d·ª•: 350"
                              required
                              min={200}
                              max={500}
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              L∆∞·ª£ng m√°u ti√™u chu·∫©n: 200-500ml (khuy·∫øn ngh·ªã: 350ml)
                            </p>
                          </div>

                          {/* Th√†nh ph·∫ßn m√°u */}
                          <div>
                            <Label>Th√†nh ph·∫ßn mu·ªën hi·∫øn</Label>
                            <div className="flex gap-4 flex-wrap mt-1">
                              {["whole", "RBC", "plasma", "platelet"].map((comp) => (
                                <label key={comp} className="flex items-center gap-1">
                                  <input
                                    type="checkbox"
                                    checked={formData.components_offered.includes(comp)}
                                    onChange={() => handleCheckboxChange(comp)}
                                  />
                                  {returnNameComponentBlood(comp)}
                                </label>
                              ))}
                            </div>
                          </div>

                          {/* Ghi ch√∫ */}
                          <div>
                            <Label htmlFor="notes">Ghi ch√∫ th√™m</Label>
                            <Textarea
                              id="notes"
                              value={formData.notes}
                              onChange={(e) =>
                                setFormData((prev) => ({ ...prev, notes: e.target.value }))
                              }
                              placeholder="Ghi ch√∫ ƒë·∫∑c bi·ªát (n·∫øu c√≥)..."
                            />
                          </div>

                          {/* Submit */}
                          <Button 
                            type="submit" 
                            disabled={loading || showSuccessMessage} 
                            className={`w-full transition-all duration-300 ${
                              showSuccessMessage 
                                ? 'bg-green-600 hover:bg-green-700' 
                                : 'bg-red-600 hover:bg-red-700'
                            }`}
                          >
                            {loading ? (
                              <>
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                                ƒêang g·ª≠i...
                              </>
                            ) : showSuccessMessage ? (
                              <>
                                <CheckCircle className="w-4 h-4 mr-2" />
                                ƒêƒÉng k√Ω th√†nh c√¥ng!
                              </>
                            ) : (
                              "ƒêƒÉng k√Ω hi·∫øn m√°u"
                            )}
                          </Button>
                        </div>
                      </div>
                      </div>
                  </form>
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Call to Action Section */}
          <div className="mt-12 text-center">
            <Card className="bg-gradient-to-r from-red-500 to-pink-600 text-white border-0">
              <CardContent className="p-8">
                <h2 className="text-2xl font-bold mb-4">T√¨m ƒëi·ªÉm hi·∫øn m√°u g·∫ßn b·∫°n</h2>
                <p className="text-red-100 mb-6 max-w-2xl mx-auto">
                  Kh√°m ph√° c√°c ƒëi·ªÉm hi·∫øn m√°u v√† b·ªánh vi·ªán g·∫ßn khu v·ª±c c·ªßa b·∫°n. T√¨m ƒë·ªãa ƒëi·ªÉm thu·∫≠n ti·ªán nh·∫•t ƒë·ªÉ th·ª±c hi·ªán vi·ªác hi·∫øn m√°u.
                </p>
                <Link href="/check-map">
                  <Button className="bg-white text-red-600 hover:bg-red-50 font-semibold px-8 py-3 text-lg">
                    üó∫Ô∏è Xem b·∫£n ƒë·ªì ƒëi·ªÉm hi·∫øn m√°u
                  </Button>
                </Link>
              </CardContent>
            </Card>
          </div>

          {/* Additional Information Section */}
          <div className="mt-12 grid md:grid-cols-3 gap-6">
            <Card className="bg-blue-50 border-blue-200">
              <CardContent className="p-6 text-center">
                <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Heart className="w-6 h-6 text-white" />
                </div>
                <h3 className="font-semibold text-blue-800 mb-2">Quy tr√¨nh an to√†n</h3>
                <p className="text-sm text-blue-700">
                  T·∫•t c·∫£ d·ª•ng c·ª• ƒë·ªÅu v√¥ tr√πng, s·ª≠ d·ª•ng m·ªôt l·∫ßn v√† ƒë∆∞·ª£c ti√™u h·ªßy ngay sau khi s·ª≠ d·ª•ng.
                </p>
              </CardContent>
            </Card>

            <Card className="bg-green-50 border-green-200">
              <CardContent className="p-6 text-center">
                <div className="w-12 h-12 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Shield className="w-6 h-6 text-white" />
                </div>
                <h3 className="font-semibold text-green-800 mb-2">Ki·ªÉm tra s·ª©c kh·ªèe</h3>
                <p className="text-sm text-green-700">
                  B√°c sƒ© s·∫Ω ki·ªÉm tra s·ª©c kh·ªèe t·ªïng qu√°t tr∆∞·ªõc khi ti·∫øn h√†nh hi·∫øn m√°u.
                </p>
              </CardContent>
            </Card>

            <Card className="bg-purple-50 border-purple-200">
              <CardContent className="p-6 text-center">
                <div className="w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <CheckCircle className="w-6 h-6 text-white" />
                </div>
                <h3 className="font-semibold text-purple-800 mb-2">ChƒÉm s√≥c sau hi·∫øn</h3>
                <p className="text-sm text-purple-700">ƒê∆∞·ª£c ngh·ªâ ng∆°i v√† cung c·∫•p ƒë·ªì ƒÉn nh·∫π ƒë·ªÉ ph·ª•c h·ªìi s·ª©c kh·ªèe.</p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      <Footer />
      </div>
    </ProtectedRoute>
  )
}
